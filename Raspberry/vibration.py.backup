import RPi.GPIO as GPIO
import time
import logging

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Pin definitions
MOTOR_1_PIN = 18
MOTOR_2_PIN = 23
OPTICAL_GATE_1_PIN = 24  # Start trigger
OPTICAL_GATE_2_PIN = 25  # Stop trigger

# Initialize GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(MOTOR_1_PIN, GPIO.OUT)
GPIO.setup(MOTOR_2_PIN, GPIO.OUT)
GPIO.setup(OPTICAL_GATE_1_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(OPTICAL_GATE_2_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Set up PWM for variable frequency
motor1_pwm = GPIO.PWM(MOTOR_1_PIN, 50)  # Starting frequency 50Hz
motor2_pwm = GPIO.PWM(MOTOR_2_PIN, 50)
motor1_pwm.start(0)  # Start with 0% duty cycle
motor2_pwm.start(0)

def set_motor_frequency(freq):
    """Change frequency of both motors"""
    try:
        motor1_pwm.ChangeFrequency(freq)
        motor2_pwm.ChangeFrequency(freq)
        logger.info(f"Motor frequency changed to {freq}Hz")
    except Exception as e:
        logger.error(f"Error changing frequency: {e}")

def motors_on(duty_cycle=50):
    """Turn on both motors"""
    try:
        motor1_pwm.ChangeDutyCycle(duty_cycle)
        motor2_pwm.ChangeDutyCycle(duty_cycle)
        logger.info(f"Motors turned ON with {duty_cycle}% duty cycle")
    except Exception as e:
        logger.error(f"Error turning motors on: {e}")

def motors_off():
    """Turn off both motors"""
    try:
        motor1_pwm.ChangeDutyCycle(0)
        motor2_pwm.ChangeDutyCycle(0)
        logger.info("Motors turned OFF")
    except Exception as e:
        logger.error(f"Error turning motors off: {e}")

try:
    logger.info("System initialized and ready")
    current_freq = 50

    while True:
        # Read optical gates
        gate1_state = GPIO.input(OPTICAL_GATE_1_PIN)
        gate2_state = GPIO.input(OPTICAL_GATE_2_PIN)

        # Log gate states for debugging
        logger.debug(f"Gate 1 state: {gate1_state}, Gate 2 state: {gate2_state}")

        if not gate1_state:  # Gate 1 triggered (remember pull-up resistor)
            logger.info("Optical gate 1 triggered - Starting motors")
            motors_on()
            # Vary frequency every 2 seconds
            current_freq = (current_freq % 100) + 10  # Cycle between 10-100 Hz
            set_motor_frequency(current_freq)

        if not gate2_state:  # Gate 2 triggered
            logger.info("Optical gate 2 triggered - Stopping motors")
            motors_off()

        time.sleep(0.1)  # Small delay to prevent CPU overload

except KeyboardInterrupt:
    logger.info("Program terminated by user")
except Exception as e:
    logger.error(f"Unexpected error occurred: {e}")
finally:
    # Clean up
    motors_off()
    motor1_pwm.stop()
    motor2_pwm.stop()
    GPIO.cleanup()
    logger.info("GPIO cleanup completed")
